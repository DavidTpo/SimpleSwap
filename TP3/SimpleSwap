// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";

/**
 * @title SimpleSwap
 * @notice A simplified decentralized exchange implementation supporting liquidity pools and token swaps
 * @dev Implements core AMM functionality similar to Uniswap v1
 */
contract SimpleSwap {
    using SafeERC20 for IERC20;

    /**
     * @dev Struct representing a token pair pool
     * @param tokenA Address of first token in pair
     * @param tokenB Address of second token in pair
     * @param reserveA Current reserve amount of tokenA
     * @param reserveB Current reserve amount of tokenB
     * @param totalLiquidity Total liquidity tokens minted for this pair
     * @param liquidity Mapping of liquidity provider addresses to their share
     */
    struct Pair {
        address tokenA;
        address tokenB;
        uint256 reserveA;
        uint256 reserveB;
        uint256 totalLiquidity;
        mapping(address => uint256) liquidity;
    }

    /// @dev Mapping of pair key (hash of sorted token addresses) to Pair data
    mapping(bytes32 => Pair) private pairs;

    /**
     * @notice Emitted when liquidity is added to a pool
     * @param provider Address that provided liquidity
     * @param tokenA First token in pair
     * @param tokenB Second token in pair
     * @param amountA Amount of tokenA deposited
     * @param amountB Amount of tokenB deposited
     * @param liquidity Amount of liquidity tokens minted
     */
    event LiquidityAdded(
        address indexed provider,
        address indexed tokenA,
        address indexed tokenB,
        uint256 amountA,
        uint256 amountB,
        uint256 liquidity
    );

    /**
     * @notice Emitted when liquidity is removed from a pool
     * @param provider Address that removed liquidity
     * @param tokenA First token in pair
     * @param tokenB Second token in pair
     * @param amountA Amount of tokenA withdrawn
     * @param amountB Amount of tokenB withdrawn
     * @param liquidity Amount of liquidity tokens burned
     */
    event LiquidityRemoved(
        address indexed provider,
        address indexed tokenA,
        address indexed tokenB,
        uint256 amountA,
        uint256 amountB,
        uint256 liquidity
    );

    /**
     * @notice Emitted when a token swap occurs
     * @param sender Address initiating the swap
     * @param tokenIn Token being sold
     * @param tokenOut Token being bought
     * @param amountIn Amount of tokenIn sent
     * @param amountOut Amount of tokenOut received
     */
    event TokensSwapped(
        address indexed sender,
        address indexed tokenIn,
        address indexed tokenOut,
        uint256 amountIn,
        uint256 amountOut
    );

    /**
     * @notice Adds liquidity to a token pair pool
     * @dev Mints liquidity tokens proportional to the deposit amounts
     * @param tokenA Address of first token
     * @param tokenB Address of second token
     * @param amountADesired Desired amount of tokenA to deposit
     * @param amountBDesired Desired amount of tokenB to deposit
     * @param amountAMin Minimum acceptable amount of tokenA
     * @param amountBMin Minimum acceptable amount of tokenB
     * @param to Address to receive liquidity tokens
     * @param deadline Timestamp after which transaction will revert
     * @return amountA Actual amount of tokenA deposited
     * @return amountB Actual amount of tokenB deposited
     * @return liquidity Amount of liquidity tokens minted
     */
    function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity) {
        require(deadline >= block.timestamp, "SimpleSwap: EXPIRED");
        require(tokenA != tokenB, "SimpleSwap: IDENTICAL_ADDRESSES");
        require(tokenA != address(0) && tokenB != address(0), "SimpleSwap: ZERO_ADDRESS");
        require(to != address(0), "SimpleSwap: INVALID_TO_ADDRESS");
        require(amountADesired > 0 && amountBDesired > 0, "SimpleSwap: INSUFFICIENT_AMOUNT");
        require(amountADesired >= amountAMin && amountBDesired >= amountBMin, "SimpleSwap: INSUFFICIENT_MIN_AMOUNT");

        bytes32 pairKey = _sortAndGetPairKey(tokenA, tokenB);
        Pair storage pair = pairs[pairKey];
        
        if (pair.totalLiquidity == 0) {
            _initializeNewPair(pair, tokenA, tokenB, amountADesired, amountBDesired);
            liquidity = _calculateInitialLiquidity(amountADesired, amountBDesired);
            amountA = amountADesired;
            amountB = amountBDesired;
        } else {
            (amountA, amountB) = _calculateOptimalAmounts(
                amountADesired,
                amountBDesired,
                amountAMin,
                amountBMin,
                pair.reserveA,
                pair.reserveB
            );
            liquidity = _calculateLiquidity(amountA, amountB, pair.reserveA, pair.reserveB, pair.totalLiquidity);
            pair.reserveA += amountA;
            pair.reserveB += amountB;
        }
        
        pair.totalLiquidity += liquidity;
        pair.liquidity[to] += liquidity;
        _transferTokens(tokenA, tokenB, amountA, amountB);
        
        emit LiquidityAdded(to, tokenA, tokenB, amountA, amountB, liquidity);
    }

    /**
     * @notice Removes liquidity from a token pair pool
     * @dev Burns liquidity tokens and returns underlying assets proportionally
     * @param tokenA Address of first token
     * @param tokenB Address of second token
     * @param liquidity Amount of liquidity tokens to burn
     * @param amountAMin Minimum acceptable amount of tokenA to receive
     * @param amountBMin Minimum acceptable amount of tokenB to receive
     * @param to Address to receive withdrawn tokens
     * @param deadline Timestamp after which transaction will revert
     * @return amountA Actual amount of tokenA withdrawn
     * @return amountB Actual amount of tokenB withdrawn
     */
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountA, uint256 amountB) {
        require(deadline >= block.timestamp, "SimpleSwap: EXPIRED");
        require(tokenA != tokenB, "SimpleSwap: IDENTICAL_ADDRESSES");
        require(tokenA != address(0) && tokenB != address(0), "SimpleSwap: ZERO_ADDRESS");
        require(to != address(0), "SimpleSwap: INVALID_TO_ADDRESS");
        require(liquidity > 0, "SimpleSwap: INSUFFICIENT_LIQUIDITY");

        Pair storage pair = _getPair(tokenA, tokenB);
        require(pair.liquidity[msg.sender] >= liquidity, "SimpleSwap: INSUFFICIENT_LIQUIDITY_BALANCE");

        amountA = (liquidity * pair.reserveA) / pair.totalLiquidity;
        amountB = (liquidity * pair.reserveB) / pair.totalLiquidity;
        require(amountA >= amountAMin && amountB >= amountBMin, "SimpleSwap: INSUFFICIENT_OUTPUT_AMOUNT");

        _updatePairAfterRemove(pair, liquidity, amountA, amountB);
        _transferTokensToUser(tokenA, tokenB, to, amountA, amountB);
        
        emit LiquidityRemoved(msg.sender, tokenA, tokenB, amountA, amountB, liquidity);
    }

    /**
     * @notice Swaps an exact amount of input tokens for output tokens
     * @dev Implements constant product formula with 0.3% fee
     * @param amountIn Exact amount of input tokens to swap
     * @param amountOutMin Minimum acceptable amount of output tokens
     * @param path Array with two elements: [inputToken, outputToken]
     * @param to Address to receive output tokens
     * @param deadline Timestamp after which transaction will revert
     * @return amounts Array with input and output amounts
     */
    function swapExactTokensForTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts) {
        require(deadline >= block.timestamp, "SimpleSwap: EXPIRED");
        require(path.length == 2, "SimpleSwap: INVALID_PATH");
        require(amountIn > 0, "SimpleSwap: INSUFFICIENT_INPUT_AMOUNT");
        require(to != address(0), "SimpleSwap: INVALID_TO_ADDRESS");

        Pair storage pair = _getPair(path[0], path[1]);
        (uint256 reserveIn, uint256 reserveOut) = _getReserves(pair, path[0]);
        
        uint256 amountOut = getAmountOut(amountIn, reserveIn, reserveOut);
        require(amountOut >= amountOutMin, "SimpleSwap: INSUFFICIENT_OUTPUT_AMOUNT");

        _updateReserves(pair, path[0], amountIn, amountOut);
        _executeSwap(path[0], path[1], amountIn, amountOut, to);

        amounts = new uint256[](2);
        amounts[0] = amountIn;
        amounts[1] = amountOut;
        emit TokensSwapped(msg.sender, path[0], path[1], amountIn, amountOut);
    }

    /**
     * @notice Returns the price of tokenA in terms of tokenB
     * @dev Price is calculated as (reserveB / reserveA) with 18 decimals
     * @param tokenA First token in pair
     * @param tokenB Second token in pair
     * @return price Price of tokenA in terms of tokenB
     */
    function getPrice(address tokenA, address tokenB) external view returns (uint256 price) {
        Pair storage pair = _getPair(tokenA, tokenB);
        price = tokenA == pair.tokenA 
            ? (pair.reserveB * 1e18) / pair.reserveA 
            : (pair.reserveA * 1e18) / pair.reserveB;
    }

    /**
     * @notice Calculates the amount of output tokens for a given input
     * @dev Implements x*y=k formula with 0.3% fee
     * @param amountIn Amount of input tokens
     * @param reserveIn Reserve amount of input token
     * @param reserveOut Reserve amount of output token
     * @return amountOut Expected amount of output tokens
     */
    function getAmountOut(
        uint256 amountIn,
        uint256 reserveIn,
        uint256 reserveOut
    ) public pure returns (uint256 amountOut) {
        uint256 amountInWithFee = amountIn * 997; // 0.3% fee
        amountOut = (amountInWithFee * reserveOut) / ((reserveIn * 1000) + amountInWithFee);
    }

    // ==================== INTERNAL HELPERS ====================

    /**
     * @dev Sorts token addresses and returns their hash as pair key
     * @param tokenA First token address
     * @param tokenB Second token address
     * @return pairKey Hash of sorted token addresses
     */
    function _sortAndGetPairKey(address tokenA, address tokenB) private pure returns (bytes32 pairKey) {
        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);
        pairKey = keccak256(abi.encodePacked(token0, token1));
    }

    /**
     * @dev Returns Pair storage for given tokens
     * @param tokenA First token address
     * @param tokenB Second token address
     * @return pair Reference to Pair storage
     */
    function _getPair(address tokenA, address tokenB) private view returns (Pair storage pair) {
        pair = pairs[_sortAndGetPairKey(tokenA, tokenB)];
    }

    /**
     * @dev Initializes a new token pair
     * @param pair Pair storage reference
     * @param tokenA First token address
     * @param tokenB Second token address
     * @param amountA Initial amount of tokenA
     * @param amountB Initial amount of tokenB
     */
    function _initializeNewPair(
        Pair storage pair,
        address tokenA,
        address tokenB,
        uint256 amountA,
        uint256 amountB
    ) private {
        (pair.tokenA, pair.tokenB) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);
        pair.reserveA = amountA;
        pair.reserveB = amountB;
    }

    /**
     * @dev Calculates initial liquidity as geometric mean of amounts
     * @param amountA Amount of tokenA
     * @param amountB Amount of tokenB
     * @return liquidity Amount of liquidity tokens to mint
     */
    function _calculateInitialLiquidity(uint256 amountA, uint256 amountB) private pure returns (uint256 liquidity) {
        liquidity = sqrt(amountA * amountB);
    }

    /**
     * @dev Calculates optimal deposit amounts maintaining pool ratio
     * @return amountA Optimal amount of tokenA to deposit
     * @return amountB Optimal amount of tokenB to deposit
     */
    function _calculateOptimalAmounts(
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        uint256 reserveA,
        uint256 reserveB
    ) private pure returns (uint256 amountA, uint256 amountB) {
        uint256 amountBOptimal = (amountADesired * reserveB) / reserveA;
        if (amountBOptimal <= amountBDesired) {
            require(amountBOptimal >= amountBMin, "SimpleSwap: INSUFFICIENT_B_AMOUNT");
            return (amountADesired, amountBOptimal);
        }
        uint256 amountAOptimal = (amountBDesired * reserveA) / reserveB;
        require(amountAOptimal <= amountADesired && amountAOptimal >= amountAMin, "SimpleSwap: INSUFFICIENT_A_AMOUNT");
        return (amountAOptimal, amountBDesired);
    }

    /**
     * @dev Calculates liquidity tokens to mint based on pool share
     * @return liquidity Amount of liquidity tokens to mint
     */
    function _calculateLiquidity(
        uint256 amountA,
        uint256 amountB,
        uint256 reserveA,
        uint256 reserveB,
        uint256 totalLiquidity
    ) private pure returns (uint256 liquidity) {
        uint256 liquidityA = (amountA * totalLiquidity) / reserveA;
        uint256 liquidityB = (amountB * totalLiquidity) / reserveB;
        liquidity = liquidityA < liquidityB ? liquidityA : liquidityB;
    }

    /**
     * @dev Updates pool reserves after liquidity removal
     */
    function _updatePairAfterRemove(
        Pair storage pair,
        uint256 liquidity,
        uint256 amountA,
        uint256 amountB
    ) private {
        pair.reserveA -= amountA;
        pair.reserveB -= amountB;
        pair.totalLiquidity -= liquidity;
        pair.liquidity[msg.sender] -= liquidity;
    }

    /**
     * @dev Returns reserves for given tokenIn direction
     * @return reserveIn Reserve of input token
     * @return reserveOut Reserve of output token
     */
    function _getReserves(Pair storage pair, address tokenIn) private view returns (uint256 reserveIn, uint256 reserveOut) {
        (reserveIn, reserveOut) = tokenIn == pair.tokenA 
            ? (pair.reserveA, pair.reserveB) 
            : (pair.reserveB, pair.reserveA);
    }

    /**
     * @dev Updates pool reserves after swap
     */
    function _updateReserves(
        Pair storage pair,
        address tokenIn,
        uint256 amountIn,
        uint256 amountOut
    ) private {
        if (tokenIn == pair.tokenA) {
            pair.reserveA += amountIn;
            pair.reserveB -= amountOut;
        } else {
            pair.reserveB += amountIn;
            pair.reserveA -= amountOut;
        }
    }

    /**
     * @dev Transfers tokens from user to contract
     */
    function _transferTokens(
        address tokenA,
        address tokenB,
        uint256 amountA,
        uint256 amountB
    ) private {
        IERC20(tokenA).safeTransferFrom(msg.sender, address(this), amountA);
        IERC20(tokenB).safeTransferFrom(msg.sender, address(this), amountB);
    }

    /**
     * @dev Transfers tokens to user
     */
    function _transferTokensToUser(
        address tokenA,
        address tokenB,
        address to,
        uint256 amountA,
        uint256 amountB
    ) private {
        IERC20(tokenA).safeTransfer(to, amountA);
        IERC20(tokenB).safeTransfer(to, amountB);
    }

    /**
     * @dev Executes token swap transfers
     */
    function _executeSwap(
        address tokenIn,
        address tokenOut,
        uint256 amountIn,
        uint256 amountOut,
        address to
    ) private {
        IERC20(tokenIn).safeTransferFrom(msg.sender, address(this), amountIn);
        IERC20(tokenOut).safeTransfer(to, amountOut);
    }

    /**
     * @dev Babylonian square root implementation
     * @param x Number to calculate square root of
     * @return y Square root result
     */
    function sqrt(uint256 x) private pure returns (uint256 y) {
        uint256 z = (x + 1) / 2;
        y = x;
        while (z < y) {
            y = z;
            z = (x / z + z) / 2;
        }
    }
}
